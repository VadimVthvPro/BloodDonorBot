"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

class UserFunctions:
    def __init__(self, db_config):
        self.db_config = db_config

    def get_db_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return psycopg2.connect(**self.db_config)

    async def update_donation_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏"""
        await update.callback_query.edit_message_text(
            "üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–∏–∫–æ–≥–¥–∞', –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–∞–≤–∞–ª–∏ –∫—Ä–æ–≤—å):"
        )
        return 'UPDATING_DONATION_DATE'

    async def handle_donation_date_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏"""
        last_donation = update.message.text
        
        if last_donation.lower() == '–Ω–∏–∫–æ–≥–¥–∞':
            last_donation_date = None
        else:
            try:
                last_donation_date = datetime.strptime(last_donation, '%d.%m.%Y').date()
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return 'UPDATING_DONATION_DATE'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = update.effective_user
        conn = self.get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE users 
            SET last_donation_date = %s 
            WHERE telegram_id = %s
        """, (last_donation_date, user.id))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        await update.message.reply_text(
            "‚úÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot import BloodDonorBot
        bot_instance = BloodDonorBot()
        await bot_instance.show_user_menu(update, context)
        return 'USER_MENU'

    async def update_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        await update.callback_query.edit_message_text(
            "üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥):"
        )
        return 'UPDATING_LOCATION'

    async def handle_location_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        location = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = update.effective_user
        conn = self.get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            UPDATE users 
            SET location = %s 
            WHERE telegram_id = %s
        """, (location, user.id))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {location}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot import BloodDonorBot
        bot_instance = BloodDonorBot()
        await bot_instance.show_user_menu(update, context)
        return 'USER_MENU'

    async def handle_update_donation_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return UPDATING_DONATION_DATE

    async def save_updated_donation_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            new_date = update.message.text.strip()
            if new_date.lower() == "–Ω–∏–∫–æ–≥–¥–∞":
                last_donation_date = None
            else:
                last_donation_date = datetime.strptime(new_date, "%d.%m.%Y").date()

            user_id = update.effective_user.id
            conn = self.get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE users 
                SET last_donation_date = %s 
                WHERE telegram_id = %s
            """, (last_donation_date, user_id))
            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text("‚úÖ –î–∞—Ç–∞ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            await self.show_user_menu(update, context)
            return USER_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–¥–∞—á–∏: {e}")
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return UPDATING_DONATION_DATE

    async def handle_update_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥/–ª–æ–∫–∞—Ü–∏—é:")
        return UPDATING_LOCATION

    async def save_updated_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            location = update.message.text.strip()
            user_id = update.effective_user.id
            conn = self.get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE users 
                SET location = %s 
                WHERE telegram_id = %s
            """, (location, user_id))
            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await self.show_user_menu(update, context)
            return USER_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return UPDATING_LOCATION

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)

            cursor.execute("SELECT COUNT(*) FROM users WHERE role = 'user'")
            total_users = cursor.fetchone()['count']

            cursor.execute("""
                SELECT blood_type, COUNT(*) as count 
                FROM users 
                WHERE role = 'user' 
                GROUP BY blood_type 
                ORDER BY blood_type
            """)
            blood_stats = cursor.fetchall()

            cursor.execute("""
                SELECT location, COUNT(*) as count 
                FROM users 
                WHERE role = 'user' 
                GROUP BY location 
                ORDER BY count DESC 
                LIMIT 5
            """)
            top_locations = cursor.fetchall()

            text = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            text += f"üë• –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: {total_users}\n\n"
            text += "ü©∏ –ü–æ –≥—Ä—É–ø–ø–∞–º –∫—Ä–æ–≤–∏:\n"
            for row in blood_stats:
                text += f"‚Ä¢ {row['blood_type']}: {row['count']}\n"
            text += "\nüìç –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤:\n"
            for row in top_locations:
                text += f"‚Ä¢ {row['location']}: {row['count']}\n"

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

            cursor.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    async def show_my_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤—Ä–∞—á–∞"""
        user = update.effective_user
        conn = self.get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            SELECT * FROM donation_requests 
            WHERE doctor_id = %s 
            ORDER BY created_at DESC 
            LIMIT 10
        """, (user.id,))
        
        requests = cursor.fetchall()
        
        if requests:
            text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
            for req in requests:
                text += f"ü©∏ {req['blood_type']} - {req['location']}\n"
                text += f"üìÖ {req['request_date'].strftime('%d.%m.%Y')}\n"
                text += f"üïê {req['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–¥–∞—á—É –∫—Ä–æ–≤–∏."
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        
        cursor.close()
        conn.close()

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–Ω–æ—Ä–∞–º"""
        conn = self.get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º –∫—Ä–æ–≤–∏
        cursor.execute("""
            SELECT 
                blood_type,
                COUNT(*) as total_donors,
                COUNT(CASE WHEN last_donation_date IS NULL THEN 1 END) as new_donors,
                COUNT(CASE WHEN last_donation_date < CURRENT_DATE - INTERVAL '60 days' THEN 1 END) as available_donors
            FROM users 
            WHERE role = 'user' AND is_registered = TRUE AND blood_type IS NOT NULL
            GROUP BY blood_type
            ORDER BY blood_type
        """)
        
        stats = cursor.fetchall()
        
        if stats:
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–Ω–æ—Ä–∞–º:\n\n"
            for stat in stats:
                text += f"ü©∏ {stat['blood_type']}:\n"
                text += f"   –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: {stat['total_donors']}\n"
                text += f"   –ù–æ–≤—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤: {stat['new_donors']}\n"
                text += f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {stat['available_donors']}\n\n"
        else:
            text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤."
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("""
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN role = 'doctor' THEN 1 END) as total_doctors,
                COUNT(CASE WHEN role = 'user' THEN 1 END) as total_donors
            FROM users 
            WHERE is_registered = TRUE
        """)
        
        general_stats = cursor.fetchone()
        if general_stats:
            text += f"üë• –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            text += f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {general_stats['total_users']}\n"
            text += f"   –í—Ä–∞—á–µ–π: {general_stats['total_doctors']}\n"
            text += f"   –î–æ–Ω–æ—Ä–æ–≤: {general_stats['total_donors']}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        
        cursor.close()
        conn.close()

    def get_available_donors(self, blood_type: str, location: str = None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤"""
        conn = self.get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        if location:
            cursor.execute("""
                SELECT telegram_id, first_name, last_name, location, last_donation_date
                FROM users 
                WHERE blood_type = %s AND role = 'user' AND is_registered = TRUE
                AND (location ILIKE %s OR location ILIKE %s)
                AND (last_donation_date IS NULL OR last_donation_date < CURRENT_DATE - INTERVAL '60 days')
            """, (blood_type, f"%{location}%", location))
        else:
            cursor.execute("""
                SELECT telegram_id, first_name, last_name, location, last_donation_date
                FROM users 
                WHERE blood_type = %s AND role = 'user' AND is_registered = TRUE
                AND (last_donation_date IS NULL OR last_donation_date < CURRENT_DATE - INTERVAL '60 days')
            """, (blood_type,))
        
        donors = cursor.fetchall()
        cursor.close()
        conn.close()
        
        return donors

    def check_donation_eligibility(self, user_id: int) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        conn = self.get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            SELECT last_donation_date, blood_type, location
            FROM users 
            WHERE telegram_id = %s AND role = 'user'
        """, (user_id,))
        
        user_data = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not user_data:
            return {'can_donate': False, 'reason': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        if not user_data['last_donation_date']:
            return {'can_donate': True, 'days_wait': 0}
        
        days_since = (date.today() - user_data['last_donation_date']).days
        min_interval = 60
        
        if days_since >= min_interval:
            return {'can_donate': True, 'days_wait': 0}
        else:
            return {
                'can_donate': False, 
                'days_wait': min_interval - days_since,
                'last_donation': user_data['last_donation_date']
            } 