import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, \
    ConversationHandler
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ROLE, ENTERING_PASSWORD, ENTERING_BLOOD_TYPE, ENTERING_LOCATION, \
    ENTERING_LAST_DONATION, USER_MENU, DOCTOR_MENU, ENTERING_DONATION_REQUEST, \
    ENTERING_REQUEST_LOCATION, ENTERING_REQUEST_ADDRESS, ENTERING_REQUEST_DATE, \
    UPDATE_LOCATION, UPDATE_DONATION_DATE = range(13)

# –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ä–∞—á–µ–π
MASTER_PASSWORD = "doctor2024"


class BloodDonorBot:
    def __init__(self):
        self.db_config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'database': os.getenv('DB_NAME', 'blood_donor_bot'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', ''),
            'port': os.getenv('DB_PORT', '5432')
        }
        self.application = None
        self.init_database()

    def get_db_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return psycopg2.connect(**self.db_config)

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    last_name VARCHAR(255),
                    role VARCHAR(20) NOT NULL CHECK (role IN ('user', 'doctor')),
                    blood_type VARCHAR(10),
                    location VARCHAR(255),
                    last_donation_date DATE,
                    is_registered BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS donation_requests (
                    id SERIAL PRIMARY KEY,
                    doctor_id BIGINT NOT NULL,
                    blood_type VARCHAR(10) NOT NULL,
                    location VARCHAR(255) NOT NULL,
                    address VARCHAR(255) NOT NULL,
                    request_date DATE NOT NULL,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (doctor_id) REFERENCES users(telegram_id)
                )
            """)

            conn.commit()
            cursor.close()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user.id,))
            existing_user = cursor.fetchone()

            if existing_user and existing_user['is_registered']:
                if existing_user['role'] == 'doctor':
                    await self.show_doctor_menu(update, context)
                    return DOCTOR_MENU
                else:
                    await self.show_user_menu(update, context)
                    return USER_MENU
            else:
                keyboard = [
                    [InlineKeyboardButton("üë§ –Ø –¥–æ–Ω–æ—Ä", callback_data="role_user")],
                    [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –Ø –≤—Ä–∞—á", callback_data="role_doctor")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BloodDonorBot!\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å –¥–æ–Ω–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                    reply_markup=reply_markup
                )

            cursor.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        return CHOOSING_ROLE

    async def choose_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {query.data}")

        if query.data == "role_user":
            context.user_data['role'] = 'user'
            await query.edit_message_text(
                "üë§ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –¥–æ–Ω–æ—Ä–∞.\n\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å:\n"
                "‚Ä¢ –ì—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏\n"
                "‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
                "‚Ä¢ –î–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏\n\n"
                "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:"
            )
            return ENTERING_PASSWORD
        elif query.data == "role_doctor":
            context.user_data['role'] = 'doctor'
            await query.edit_message_text(
                "üë®‚Äç‚öïÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –≤—Ä–∞—á–∞.\n\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤—Ä–∞—á–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:"
            )
            return ENTERING_PASSWORD

    async def handle_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
        password = update.message.text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å")

        if context.user_data['role'] == 'doctor':
            if password == MASTER_PASSWORD:
                await self.register_doctor(update, context)
                return DOCTOR_MENU
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ENTERING_PASSWORD
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
            context.user_data['password'] = password
            await update.message.reply_text(
                "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: A+, B-, AB+, O-):"
            )
            return ENTERING_BLOOD_TYPE

    async def register_doctor(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞"""
        user = update.effective_user
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞: {user.id}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, role, is_registered)
                VALUES (%s, %s, %s, %s, 'doctor', TRUE)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET role = 'doctor', is_registered = TRUE
            """, (user.id, user.username, user.first_name, user.last_name))

            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—á!")
            await self.show_doctor_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    async def handle_blood_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏"""
        blood_type = update.message.text.upper()
        valid_types = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']

        if blood_type not in valid_types:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: A+, B-, AB+, O- –∏ —Ç.–¥.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTERING_BLOOD_TYPE

        context.user_data['blood_type'] = blood_type
        await update.message.reply_text(
            "‚úÖ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥):"
        )
        return ENTERING_LOCATION

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        location = update.message.text
        context.user_data['location'] = location

        await update.message.reply_text(
            "‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–∏–∫–æ–≥–¥–∞', –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–∞–≤–∞–ª–∏ –∫—Ä–æ–≤—å):"
        )
        return ENTERING_LAST_DONATION

    async def handle_last_donation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏"""
        last_donation = update.message.text

        if last_donation.lower() == '–Ω–∏–∫–æ–≥–¥–∞':
            last_donation_date = None
        else:
            try:
                last_donation_date = datetime.strptime(last_donation, '%d.%m.%Y').date()
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ENTERING_LAST_DONATION

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, role, 
                                 blood_type, location, last_donation_date, is_registered)
                VALUES (%s, %s, %s, %s, 'user', %s, %s, %s, TRUE)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET blood_type = EXCLUDED.blood_type, 
                             location = EXCLUDED.location, 
                             last_donation_date = EXCLUDED.last_donation_date,
                             is_registered = TRUE
            """, (user.id, user.username, user.first_name, user.last_name,
                  context.user_data['blood_type'], context.user_data['location'], last_donation_date))

            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text(
                "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–æ–Ω–æ—Ä –∫—Ä–æ–≤–∏.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ."
            )
            await self.show_user_menu(update, context)
            return USER_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    async def show_user_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="user_info")],
            [InlineKeyboardButton("üìÖ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–¥–∞—á–∏", callback_data="update_donation")],
            [InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="update_location")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üë§ –ú–µ–Ω—é –¥–æ–Ω–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üë§ –ú–µ–Ω—é –¥–æ–Ω–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def show_doctor_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—Ä–∞—á–∞"""
        keyboard = [
            [InlineKeyboardButton("ü©∏ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫—Ä–æ–≤–∏", callback_data="create_request")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data="my_requests")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üë®‚Äç‚öïÔ∏è –ú–µ–Ω—é –≤—Ä–∞—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üë®‚Äç‚öïÔ∏è –ú–µ–Ω—é –≤—Ä–∞—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞–∂–∞–ª: {query.data}")

        if query.data == "user_info":
            await self.show_user_info(update, context)
            return USER_MENU
        elif query.data == "update_donation":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–∏–∫–æ–≥–¥–∞', –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Å–¥–∞–≤–∞–ª–∏ –∫—Ä–æ–≤—å):"
            )
            return UPDATE_DONATION_DATE
        elif query.data == "update_location":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥):")
            return UPDATE_LOCATION
        elif query.data == "create_request":
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–æ–≤–∏")
            await self.create_donation_request(update, context)
            return ENTERING_DONATION_REQUEST
        elif query.data == "my_requests":
            await self.show_my_requests(update, context)
            return DOCTOR_MENU
        elif query.data == "statistics":
            await self.show_statistics(update, context)
            return DOCTOR_MENU
        elif query.data == "help":
            await self.show_help(update, context)
            return DOCTOR_MENU if self.is_doctor(update.effective_user.id) else USER_MENU
        elif query.data == "back_to_menu":
            user = update.effective_user
            try:
                conn = self.get_db_connection()
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user.id,))
                user_data = cursor.fetchone()
                cursor.close()
                conn.close()

                if user_data and user_data['role'] == 'doctor':
                    await self.show_doctor_menu(update, context)
                    return DOCTOR_MENU
                else:
                    await self.show_user_menu(update, context)
                    return USER_MENU
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
                return CHOOSING_ROLE

    def is_doctor(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–∞—á–æ–º"""
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (user_id,))
            user_data = cursor.fetchone()
            cursor.close()
            conn.close()
            return user_data and user_data['role'] == 'doctor'
        except:
            return False

    async def show_user_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)

            cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user.id,))
            user_data = cursor.fetchone()

            if user_data:
                last_donation = user_data['last_donation_date']
                if last_donation:
                    days_since = (datetime.now().date() - last_donation).days
                    can_donate = days_since >= 60
                    status = "‚úÖ –ú–æ–∂–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å –∫—Ä–æ–≤—å" if can_donate else f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {60 - days_since} –¥–Ω–µ–π"
                else:
                    status = "‚úÖ –ú–æ–∂–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å –∫—Ä–æ–≤—å"

                info_text = f"""
üìä –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

ü©∏ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {user_data['blood_type']}
üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data['location']}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–∞—á–∞: {last_donation.strftime('%d.%m.%Y') if last_donation else '–ù–µ —Å–¥–∞–≤–∞–ª–∏'}
üîÑ –°—Ç–∞—Ç—É—Å: {status}
                """
            else:
                info_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(info_text, reply_markup=reply_markup)

            cursor.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    async def update_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        new_location = update.message.text
        user = update.effective_user
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {new_location}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                UPDATE users
                SET location = %s
                WHERE telegram_id = %s
            """, (new_location, user.id))

            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await self.show_user_menu(update, context)
            return USER_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")
            return USER_MENU

    async def update_donation_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏"""
        last_donation = update.message.text
        user = update.effective_user

        if last_donation.lower() == '–Ω–∏–∫–æ–≥–¥–∞':
            last_donation_date = None
        else:
            try:
                last_donation_date = datetime.strptime(last_donation, '%d.%m.%Y').date()
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return UPDATE_DONATION_DATE

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {last_donation_date}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                UPDATE users
                SET last_donation_date = %s
                WHERE telegram_id = %s
            """, (last_donation_date, user.id))

            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await self.show_user_menu(update, context)
            return USER_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å–¥–∞—á–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–¥–∞—á–∏.")
            return USER_MENU

    async def create_donation_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–¥–∞—á—É –∫—Ä–æ–≤–∏"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–æ–≤–∏")
        keyboard = [
            [InlineKeyboardButton("A+", callback_data="blood_A+"),
             InlineKeyboardButton("A-", callback_data="blood_A-")],
            [InlineKeyboardButton("B+", callback_data="blood_B+"),
             InlineKeyboardButton("B-", callback_data="blood_B-")],
            [InlineKeyboardButton("AB+", callback_data="blood_AB+"),
             InlineKeyboardButton("AB-", callback_data="blood_AB-")],
            [InlineKeyboardButton("O+", callback_data="blood_O+"),
             InlineKeyboardButton("O-", callback_data="blood_O-")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            "ü©∏ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–¥–∞—á—É –∫—Ä–æ–≤–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏:",
            reply_markup=reply_markup
        )

    async def handle_blood_type_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        query = update.callback_query
        await query.answer()

        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")

        if query.data == "back_to_menu":
            await self.show_doctor_menu(update, context)
            return DOCTOR_MENU

        blood_type = query.data.replace('blood_', '')
        context.user_data['request_blood_type'] = blood_type

        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {blood_type}")

        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {blood_type}\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –Ω—É–∂–Ω–∞ –∫—Ä–æ–≤—å:"
        )
        return ENTERING_REQUEST_LOCATION

    async def handle_request_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        location = update.message.text
        context.user_data['request_location'] = location

        logger.info(f"–£–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {location}")

        await update.message.reply_text(
            "‚úÖ –ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:"
        )
        return ENTERING_REQUEST_ADDRESS

    async def handle_request_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è"""
        address = update.message.text
        context.user_data['request_address'] = address

        logger.info(f"–£–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: {address}")

        await update.message.reply_text(
            "‚úÖ –ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∫—Ä–æ–≤—å (–î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return ENTERING_REQUEST_DATE

    async def handle_request_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            request_date = datetime.strptime(update.message.text, '%d.%m.%Y').date()
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTERING_REQUEST_DATE

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = update.effective_user
        logger.info(
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: –≤—Ä–∞—á {user.id}, –≥—Ä—É–ø–ø–∞ {context.user_data['request_blood_type']}, "
            f"–≥–æ—Ä–æ–¥ {context.user_data['request_location']}, –∞–¥—Ä–µ—Å {context.user_data['request_address']}, "
            f"–¥–∞—Ç–∞ {request_date}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO donation_requests (doctor_id, blood_type, location, address, request_date)
                VALUES (%s, %s, %s, %s, %s)
            """, (user.id, context.user_data['request_blood_type'],
                  context.user_data['request_location'], context.user_data['request_address'], request_date))

            conn.commit()
            cursor.close()
            conn.close()

            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–æ–Ω–æ—Ä–∞–º
            await self.notify_donors(
                context.user_data['request_blood_type'],
                context.user_data['request_location'],
                context.user_data['request_address'],
                request_date
            )

            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!\n\n"
                f"ü©∏ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {context.user_data['request_blood_type']}\n"
                f"üìç –ì–æ—Ä–æ–¥: {context.user_data['request_location']}\n"
                f"üè• –ê–¥—Ä–µ—Å: {context.user_data['request_address']}\n"
                f"üìÖ –î–∞—Ç–∞: {request_date.strftime('%d.%m.%Y')}\n\n"
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–æ–Ω–æ—Ä–∞–º."
            )

            await self.show_doctor_menu(update, context)
            return DOCTOR_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return DOCTOR_MENU

    async def show_my_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤—Ä–∞—á–∞"""
        user = update.effective_user
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)

            cursor.execute("""
                SELECT * FROM donation_requests 
                WHERE doctor_id = %s 
                ORDER BY created_at DESC 
                LIMIT 10
            """, (user.id,))

            requests = cursor.fetchall()

            if requests:
                text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
                for req in requests:
                    text += f"ü©∏ {req['blood_type']} | üìç {req['location']} | üè• {req['address']}\n"
                    text += f"üìÖ {req['request_date'].strftime('%d.%m.%Y')} | üïí {req['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            else:
                text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

            cursor.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Ä–∞—á–∞: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.")

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Ä–∞—á–∞"""
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–æ—Ä–æ–≤
            cursor.execute("SELECT COUNT(*) AS total_donors FROM users WHERE role = 'user' AND is_registered = TRUE")
            total_donors = cursor.fetchone()['total_donors']

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–æ—Ä–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º –∫—Ä–æ–≤–∏
            cursor.execute("""
                SELECT blood_type, COUNT(*) AS count 
                FROM users 
                WHERE role = 'user' AND is_registered = TRUE
                GROUP BY blood_type
                ORDER BY blood_type
            """)
            blood_type_stats = cursor.fetchall()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–¥–∞–≤–∞—Ç—å –∫—Ä–æ–≤—å
            cursor.execute("""
                SELECT COUNT(*) AS can_donate_count
                FROM users
                WHERE role = 'user' 
                  AND is_registered = TRUE
                  AND (last_donation_date IS NULL OR last_donation_date <= %s)
            """, (datetime.now().date() - timedelta(days=60),))
            can_donate_count = cursor.fetchone()['can_donate_count']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            stats_text += f"üë• –í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤: {total_donors}\n"
            stats_text += f"ü©∏ –î–æ–Ω–æ—Ä—ã, –≥–æ—Ç–æ–≤—ã–µ —Å–¥–∞—Ç—å –∫—Ä–æ–≤—å: {can_donate_count}\n\n"
            stats_text += "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –∫—Ä–æ–≤–∏:\n"

            for stat in blood_type_stats:
                stats_text += f"‚Ä¢ {stat['blood_type']}: {stat['count']} —á–µ–ª.\n"

            stats_text += "\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫—Ä–æ–≤–∏:\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute("""
                SELECT blood_type, location, address, request_date 
                FROM donation_requests 
                ORDER BY created_at DESC 
                LIMIT 5
            """)
            recent_requests = cursor.fetchall()

            if recent_requests:
                for i, req in enumerate(recent_requests, 1):
                    stats_text += (f"\n{i}. ü©∏ {req['blood_type']} | üìç {req['location']}\n"
                                   f"üè• –ê–¥—Ä–µ—Å: {req['address']}\n"
                                   f"üìÖ –î–∞—Ç–∞: {req['request_date'].strftime('%d.%m.%Y')}")
            else:
                stats_text += "\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫—Ä–æ–≤–∏."

            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(stats_text, reply_markup=reply_markup)

            cursor.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def notify_donors(self, blood_type: str, location: str, address: str, request_date):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–Ω–æ—Ä–∞–º"""
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–Ω–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã {blood_type} –≤ {location} –ø–æ –∞–¥—Ä–µ—Å—É {address}")

        try:
            conn = self.get_db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤
            cursor.execute("""
                SELECT telegram_id, first_name, last_donation_date, location 
                FROM users 
                WHERE blood_type = %s AND role = 'user' AND is_registered = TRUE
            """, (blood_type,))

            donors = cursor.fetchall()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(donors)} –¥–æ–Ω–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã {blood_type}")

            sent_count = 0
            for donor in donors:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –¥–æ–Ω–æ—Ä —Å–¥–∞–≤–∞—Ç—å –∫—Ä–æ–≤—å
                can_donate = True
                if donor['last_donation_date']:
                    days_since = (datetime.now().date() - donor['last_donation_date']).days
                    can_donate = days_since >= 60

                if can_donate:
                    message = f"""
üÜò –°–†–û–ß–ù–û –ù–£–ñ–ù–ê –ö–†–û–í–¨!

ü©∏ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {blood_type}
üìç –ì–æ—Ä–æ–¥: {location}
üè• –ê–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è: {address}
üìÖ –î–∞—Ç–∞: {request_date.strftime('%d.%m.%Y')}

–ï—Å–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! ‚ù§Ô∏è
                    """

                    try:
                        await self.application.bot.send_message(
                            chat_id=donor['telegram_id'],
                            text=message
                        )
                        sent_count += 1
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–Ω–æ—Ä—É {donor['telegram_id']}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–Ω–æ—Ä—É {donor['telegram_id']}: {e}")

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ {len(donors)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤")
            cursor.close()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ BloodDonorBot

üë§ –î–ª—è –¥–æ–Ω–æ—Ä–æ–≤:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏
‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–µ –∫—Ä–æ–≤–∏

üë®‚Äç‚öïÔ∏è –î–ª—è –≤—Ä–∞—á–µ–π:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–¥–∞—á—É –∫—Ä–æ–≤–∏
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏, –≥–æ—Ä–æ–¥ –∏ –∞–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–µ

üìã –ü—Ä–∞–≤–∏–ª–∞ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏:
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–¥–∞—á–∞–º–∏: 60 –¥–Ω–µ–π
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—Ä–∞—á–µ–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏

üîô –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        """

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
            return

        self.application = Application.builder().token(token).build()

        # –°–æ–∑–¥–∞–µ–º ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                CHOOSING_ROLE: [CallbackQueryHandler(self.choose_role)],
                ENTERING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_password)],
                ENTERING_BLOOD_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_blood_type)],
                ENTERING_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_location)],
                ENTERING_LAST_DONATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_last_donation)],
                ENTERING_DONATION_REQUEST: [CallbackQueryHandler(self.handle_blood_type_request)],
                ENTERING_REQUEST_LOCATION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_request_location)],
                ENTERING_REQUEST_ADDRESS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_request_address)],
                ENTERING_REQUEST_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_request_date)],
                USER_MENU: [CallbackQueryHandler(self.handle_menu_callback)],
                DOCTOR_MENU: [CallbackQueryHandler(self.handle_menu_callback)],
                UPDATE_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.update_location)],
                UPDATE_DONATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.update_donation_date)]
            },
            fallbacks=[CommandHandler('start', self.start)]
        )

        self.application.add_handler(conv_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling()


if __name__ == '__main__':
    bot = BloodDonorBot()
    bot.run()