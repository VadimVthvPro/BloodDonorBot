"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è BloodDonorBot (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
"""

import unittest
import os
import sys
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class TestBloodDonorBotLogic(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_blood_type_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏"""
        valid_types = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']
        invalid_types = ['A', 'B', 'AB', 'O', 'A++', 'B--', 'invalid']
        
        for blood_type in valid_types:
            with self.subTest(blood_type=blood_type):
                self.assertTrue(blood_type in valid_types)
        
        for blood_type in invalid_types:
            with self.subTest(blood_type=blood_type):
                self.assertFalse(blood_type in valid_types)

    def test_date_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç"""
        valid_dates = [
            ('01.01.2024', date(2024, 1, 1)),
            ('31.12.2023', date(2023, 12, 31)),
            ('29.02.2024', date(2024, 2, 29))  # –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
        ]
        
        invalid_dates = [
            '32.01.2024',  # –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å
            '01.13.2024',  # –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü
            '01.01.24',    # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞
            '01-01-2024',  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ]
        
        for date_str, expected_date in valid_dates:
            with self.subTest(date_str=date_str):
                parsed_date = datetime.strptime(date_str, '%d.%m.%Y').date()
                self.assertEqual(parsed_date, expected_date)
        
        for date_str in invalid_dates:
            with self.subTest(date_str=date_str):
                with self.assertRaises(ValueError):
                    datetime.strptime(date_str, '%d.%m.%Y')

    def test_master_password(self):
        """–¢–µ—Å—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ä–∞—á–µ–π"""
        correct_password = "doctor2024"
        incorrect_passwords = ["doctor", "2024", "doctor2023", "admin", ""]
        
        self.assertEqual(correct_password, "doctor2024")
        
        for password in incorrect_passwords:
            with self.subTest(password=password):
                self.assertNotEqual(password, "doctor2024")

    def test_donation_interval_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–¥–∞—á–∞–º–∏ –∫—Ä–æ–≤–∏"""
        min_interval = 60  # –¥–Ω–µ–π
        
        # –¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–Ω–æ—Ä–∞ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–ª –∫—Ä–æ–≤—å)
        last_donation = None
        can_donate = True if last_donation is None else False
        self.assertTrue(can_donate)
        
        # –¢–µ—Å—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–∞–≤–∞–ª –∫—Ä–æ–≤—å –¥–∞–≤–Ω–æ (–±–æ–ª–µ–µ 60 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        old_date = date(2023, 1, 1)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
        days_since = (date.today() - old_date).days
        can_donate = days_since >= min_interval
        self.assertTrue(can_donate)
        
        # –¢–µ—Å—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–∞–≤–∞–ª –∫—Ä–æ–≤—å –Ω–µ–¥–∞–≤–Ω–æ (–º–µ–Ω–µ–µ 60 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        recent_date = date.today()  # –°–µ–≥–æ–¥–Ω—è
        days_since = (date.today() - recent_date).days
        can_donate = days_since >= min_interval
        self.assertFalse(can_donate)

class TestDatabaseStructure(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_users_table_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        expected_columns = [
            'id', 'telegram_id', 'username', 'first_name', 'last_name',
            'role', 'blood_type', 'location', 'last_donation_date',
            'is_registered', 'created_at'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        for column in expected_columns:
            with self.subTest(column=column):
                self.assertIn(column, expected_columns)

    def test_donation_requests_table_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        expected_columns = [
            'id', 'doctor_id', 'blood_type', 'location', 'request_date',
            'description', 'created_at'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        for column in expected_columns:
            with self.subTest(column=column):
                self.assertIn(column, expected_columns)

    def test_role_constraint(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        valid_roles = ['user', 'doctor']
        invalid_roles = ['admin', 'moderator', 'guest', '']
        
        for role in valid_roles:
            with self.subTest(role=role):
                self.assertIn(role, ['user', 'doctor'])
        
        for role in invalid_roles:
            with self.subTest(role=role):
                self.assertNotIn(role, ['user', 'doctor'])

class TestConfiguration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_environment_variables(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            'TELEGRAM_TOKEN',
            'DB_HOST',
            'DB_NAME',
            'DB_USER',
            'DB_PASSWORD',
            'DB_PORT'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        for var in required_vars:
            with self.subTest(var=var):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                os.environ[var] = 'test_value'
                self.assertIn(var, os.environ)

    def test_database_config_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_config = {
            'host': 'localhost',
            'database': 'blood_donor_bot',
            'user': 'postgres',
            'password': 'test_password',
            'port': '5432'
        }
        
        required_keys = ['host', 'database', 'user', 'password', 'port']
        
        for key in required_keys:
            with self.subTest(key=key):
                self.assertIn(key, db_config)

class TestBusinessLogic(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
    
    def test_blood_type_compatibility(self):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø –∫—Ä–æ–≤–∏"""
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–æ–Ω–æ—Ä—ã
        universal_donors = ['O-']
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–∏–ø–∏–µ–Ω—Ç—ã
        universal_recipients = ['AB+']
        
        # O- –º–æ–∂–µ—Ç —Å–¥–∞–≤–∞—Ç—å –≤—Å–µ–º
        for recipient in ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']:
            with self.subTest(recipient=recipient):
                self.assertIn('O-', universal_donors)
        
        # AB+ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç –≤—Å–µ—Ö
        for donor in ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']:
            with self.subTest(donor=donor):
                self.assertIn('AB+', universal_recipients)

    def test_location_matching(self):
        """–¢–µ—Å—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
        # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        location1 = "–ú–æ—Å–∫–≤–∞"
        location2 = "–ú–æ—Å–∫–≤–∞"
        self.assertEqual(location1, location2)
        
        # –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        location3 = "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
        location4 = "–ú–æ—Å–∫–≤–∞"
        self.assertIn(location4, location3)
        
        # –¢–µ—Å—Ç –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        location5 = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        self.assertNotEqual(location1, location5)

    def test_notification_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        blood_type_match = True
        location_match = True
        can_donate = True
        
        should_notify = blood_type_match and location_match and can_donate
        self.assertTrue(should_notify)
        
        # –¢–µ—Å—Ç –∫–æ–≥–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        can_donate = False
        should_notify = blood_type_match and location_match and can_donate
        self.assertFalse(should_notify)

def run_simple_tests():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestBloodDonorBotLogic))
    suite.addTests(loader.loadTestsFromTestCase(TestDatabaseStructure))
    suite.addTests(loader.loadTestsFromTestCase(TestConfiguration))
    suite.addTests(loader.loadTestsFromTestCase(TestBusinessLogic))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è BloodDonorBot...")
    print("üìù –≠—Ç–∏ —Ç–µ—Å—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print()
    
    success = run_simple_tests()
    
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
    
    print()
    print("üìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_bot.py")
    
    sys.exit(0 if success else 1) 