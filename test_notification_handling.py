import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_notification_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ—Ç–∞–ª—è—Ö"""
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'database': os.getenv('DB_NAME', 'Bloodcontrol'),
        'user': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', 'Vadamahjkl1'),
        'port': os.getenv('DB_PORT', '5432')
    }
    
    try:
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–Ω–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
        cursor.execute("""
            SELECT telegram_id, first_name, blood_type, last_donation_date 
            FROM users 
            WHERE role = 'user' AND is_registered = TRUE
            ORDER BY blood_type, first_name
        """)
        
        donors = cursor.fetchall()
        print(f"\n–ù–∞–π–¥–µ–Ω–æ –¥–æ–Ω–æ—Ä–æ–≤: {len(donors)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º –∫—Ä–æ–≤–∏
        blood_type_groups = {}
        for donor in donors:
            blood_type = donor['blood_type']
            if blood_type not in blood_type_groups:
                blood_type_groups[blood_type] = []
            blood_type_groups[blood_type].append(donor)
        
        print("\n–î–æ–Ω–æ—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –∫—Ä–æ–≤–∏:")
        for blood_type, donors_list in blood_type_groups.items():
            print(f"  {blood_type}: {len(donors_list)} –¥–æ–Ω–æ—Ä–æ–≤")
            for donor in donors_list:
                last_donation = donor['last_donation_date']
                if last_donation:
                    days_since = (datetime.now().date() - last_donation).days
                    can_donate = days_since >= 60
                    status = "‚úÖ –ú–æ–∂–µ—Ç —Å–¥–∞–≤–∞—Ç—å" if can_donate else f"‚è≥ –ü–æ–¥–æ–∂–¥–∞—Ç—å {60 - days_since} –¥–Ω–µ–π"
                else:
                    status = "‚úÖ –ú–æ–∂–µ—Ç —Å–¥–∞–≤–∞—Ç—å"
                print(f"    {donor['first_name']} (ID: {donor['telegram_id']}) - {status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–æ–Ω–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∫—Ä–æ–≤–∏
        test_blood_types = ["A+", "B+", "AB+", "O+"]
        
        print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–æ–Ω–æ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø –∫—Ä–æ–≤–∏:")
        for blood_type in test_blood_types:
            cursor.execute("""
                SELECT telegram_id, first_name, last_donation_date 
                FROM users 
                WHERE blood_type = %s AND role = 'user' AND is_registered = TRUE
            """, (blood_type,))
            
            test_donors = cursor.fetchall()
            print(f"\n  –ì—Ä—É–ø–ø–∞ {blood_type}: {len(test_donors)} –¥–æ–Ω–æ—Ä–æ–≤")
            
            eligible_donors = 0
            for donor in test_donors:
                can_donate = True
                if donor['last_donation_date']:
                    days_since = (datetime.now().date() - donor['last_donation_date']).days
                    can_donate = days_since >= 60
                
                if can_donate:
                    eligible_donors += 1
                    print(f"    {donor['first_name']} (ID: {donor['telegram_id']}) - –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")
                else:
                    print(f"    {donor['first_name']} (ID: {donor['telegram_id']}) - –Ω–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚è≥")
            
            print(f"    –í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤: {eligible_donors}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        test_blood_type = "A+"
        test_location = "–ú–æ—Å–∫–≤–∞"
        test_date = datetime.now().date()
        
        message = f"""
ü©∏ –°–†–û–ß–ù–û –ù–£–ñ–ù–ê –ö–†–û–í–¨!

–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {test_blood_type}
üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {test_location}
üìÖ –î–∞—Ç–∞: {test_date.strftime('%d.%m.%Y')}

–ï—Å–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! ‚ù§Ô∏è
        """
        
        print(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {test_blood_type}:")
        print(message)
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    test_notification_handling() 