import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING_ROLE, ENTERING_PASSWORD, ENTERING_BLOOD_TYPE, ENTERING_LOCATION, \
ENTERING_LAST_DONATION, USER_MENU, DOCTOR_MENU, ENTERING_DONATION_REQUEST, \
ENTERING_REQUEST_LOCATION, ENTERING_REQUEST_DATE = range(10)

# –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ä–∞—á–µ–π
MASTER_PASSWORD = "doctor2024"

class SimpleBloodBot:
    def __init__(self):
        self.db_config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'database': os.getenv('DB_NAME', 'Bloodcontrol'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', 'Vadamahjkl1'),
            'port': os.getenv('DB_PORT', '5432')
        }

    def get_db_connection(self):
        return psycopg2.connect(**self.db_config)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        keyboard = [
            [InlineKeyboardButton("üë§ –Ø –¥–æ–Ω–æ—Ä", callback_data="role_user")],
            [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –Ø –≤—Ä–∞—á", callback_data="role_doctor")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BloodDonorBot!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )
        return CHOOSING_ROLE

    async def choose_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {query.data}")
        
        if query.data == "role_doctor":
            context.user_data['role'] = 'doctor'
            await query.edit_message_text(
                "üë®‚Äç‚öïÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –≤—Ä–∞—á–∞.\n\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:"
            )
            return ENTERING_PASSWORD
        else:
            context.user_data['role'] = 'user'
            await query.edit_message_text(
                "üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –¥–æ–Ω–æ—Ä–∞.\n\n"
                "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:"
            )
            return ENTERING_PASSWORD

    async def handle_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è"""
        password = update.message.text
        logger.info(f"–í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å: {password}")
        
        if context.user_data['role'] == 'doctor':
            if password == MASTER_PASSWORD:
                await self.register_doctor(update, context)
                return DOCTOR_MENU
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return ENTERING_PASSWORD
        else:
            context.user_data['password'] = password
            await update.message.reply_text(
                "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏ (A+, B-, AB+, O-):"
            )
            return ENTERING_BLOOD_TYPE

    async def register_doctor(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞"""
        user = update.effective_user
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, role, is_registered)
                VALUES (%s, %s, %s, %s, 'doctor', TRUE)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET role = 'doctor', is_registered = TRUE
            """, (user.id, user.username, user.first_name, user.last_name))
            
            conn.commit()
            cursor.close()
            conn.close()
            
            await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—á!")
            await self.show_doctor_menu(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    async def handle_blood_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏"""
        blood_type = update.message.text.upper()
        valid_types = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']
        
        if blood_type not in valid_types:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: A+, B-, AB+, O- –∏ —Ç.–¥.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTERING_BLOOD_TYPE
        
        context.user_data['blood_type'] = blood_type
        await update.message.reply_text(
            "‚úÖ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥):"
        )
        return ENTERING_LOCATION

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        location = update.message.text
        context.user_data['location'] = location
        
        await update.message.reply_text(
            "‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–∏–∫–æ–≥–¥–∞':"
        )
        return ENTERING_LAST_DONATION

    async def handle_last_donation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–∞—á–∏"""
        last_donation = update.message.text
        
        if last_donation.lower() == '–Ω–∏–∫–æ–≥–¥–∞':
            last_donation_date = None
        else:
            try:
                last_donation_date = datetime.strptime(last_donation, '%d.%m.%Y').date()
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ENTERING_LAST_DONATION
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, role, 
                                 blood_type, location, last_donation_date, is_registered)
                VALUES (%s, %s, %s, %s, 'user', %s, %s, %s, TRUE)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET blood_type = EXCLUDED.blood_type, 
                             location = EXCLUDED.location, 
                             last_donation_date = EXCLUDED.last_donation_date,
                             is_registered = TRUE
            """, (user.id, user.username, user.first_name, user.last_name,
                  context.user_data['blood_type'], context.user_data['location'], last_donation_date))
            
            conn.commit()
            cursor.close()
            conn.close()
            
            await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            await self.show_user_menu(update, context)
            return USER_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    async def show_user_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="user_info")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üë§ –ú–µ–Ω—é –¥–æ–Ω–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üë§ –ú–µ–Ω—é –¥–æ–Ω–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def show_doctor_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—Ä–∞—á–∞"""
        keyboard = [
            [InlineKeyboardButton("ü©∏ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫—Ä–æ–≤–∏", callback_data="create_request")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üë®‚Äç‚öïÔ∏è –ú–µ–Ω—é –≤—Ä–∞—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üë®‚Äç‚öïÔ∏è –ú–µ–Ω—é –≤—Ä–∞—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
        
        if query.data == "create_request":
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–æ–≤–∏")
            await self.create_donation_request(update, context)
        elif query.data == "user_info":
            await update.callback_query.edit_message_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif query.data == "help":
            await update.callback_query.edit_message_text("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É")

    async def create_donation_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–æ–≤–∏"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞")
        
        keyboard = [
            [InlineKeyboardButton("A+", callback_data="blood_A+")],
            [InlineKeyboardButton("A-", callback_data="blood_A-")],
            [InlineKeyboardButton("B+", callback_data="blood_B+")],
            [InlineKeyboardButton("B-", callback_data="blood_B-")],
            [InlineKeyboardButton("AB+", callback_data="blood_AB+")],
            [InlineKeyboardButton("AB-", callback_data="blood_AB-")],
            [InlineKeyboardButton("O+", callback_data="blood_O+")],
            [InlineKeyboardButton("O-", callback_data="blood_O-")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "ü©∏ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–¥–∞—á—É –∫—Ä–æ–≤–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∫—Ä–æ–≤–∏:",
            reply_markup=reply_markup
        )
        return ENTERING_DONATION_REQUEST

    async def handle_blood_type_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∫—Ä–æ–≤–∏"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")
        
        blood_type = query.data.replace('blood_', '')
        context.user_data['request_blood_type'] = blood_type
        
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {blood_type}")
        
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {blood_type}\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –Ω—É–∂–Ω–∞ –∫—Ä–æ–≤—å:"
        )
        return ENTERING_REQUEST_LOCATION

    async def handle_request_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        location = update.message.text
        context.user_data['request_location'] = location
        
        logger.info(f"–£–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}")
        
        await update.message.reply_text(
            "‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ!\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∫—Ä–æ–≤—å (–î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return ENTERING_REQUEST_DATE

    async def handle_request_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            request_date = datetime.strptime(update.message.text, '%d.%m.%Y').date()
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return ENTERING_REQUEST_DATE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        user = update.effective_user
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: –≤—Ä–∞—á {user.id}, –≥—Ä—É–ø–ø–∞ {context.user_data['request_blood_type']}, –º–µ—Å—Ç–æ {context.user_data['request_location']}, –¥–∞—Ç–∞ {request_date}")
        
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO donation_requests (doctor_id, blood_type, location, request_date)
                VALUES (%s, %s, %s, %s)
            """, (user.id, context.user_data['request_blood_type'], 
                  context.user_data['request_location'], request_date))
            
            conn.commit()
            cursor.close()
            conn.close()
            
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!\n\n"
                f"ü©∏ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏: {context.user_data['request_blood_type']}\n"
                f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {context.user_data['request_location']}\n"
                f"üìÖ –î–∞—Ç–∞: {request_date.strftime('%d.%m.%Y')}\n\n"
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–æ–Ω–æ—Ä–∞–º."
            )
            
            await self.show_doctor_menu(update, context)
            return DOCTOR_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                CHOOSING_ROLE: [CallbackQueryHandler(self.choose_role)],
                ENTERING_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_password)],
                ENTERING_BLOOD_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_blood_type)],
                ENTERING_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_location)],
                ENTERING_LAST_DONATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_last_donation)],
                ENTERING_DONATION_REQUEST: [CallbackQueryHandler(self.handle_blood_type_request)],
                ENTERING_REQUEST_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_request_location)],
                ENTERING_REQUEST_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_request_date)],
                USER_MENU: [CallbackQueryHandler(self.handle_menu_callback)],
                DOCTOR_MENU: [CallbackQueryHandler(self.handle_menu_callback)]
            },
            fallbacks=[CommandHandler('start', self.start)]
        )
        
        self.application.add_handler(conv_handler)
        
        logger.info("–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()

if __name__ == '__main__':
    bot = SimpleBloodBot()
    bot.run() 